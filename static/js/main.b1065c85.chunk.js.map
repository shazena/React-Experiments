{"version":3,"sources":["components/Header.jsx","components/Question.jsx","components/TriviaSection.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Header","Question","question","useState","correct_answer","incorrect_answers","answerChoices","shuffledArray","setShuffledArray","selectedAnswer","setSelectedAnswer","pointValue","setPointValue","useEffect","shuffleAnswers","array","i","length","j","Math","floor","random","shuffleArray","determinePoint","e","target","value","console","log","className","onLoad","type","name","onClick","TriviaSection","questionList","map","App","setName","nameInput","setNameInput","showInput","setShowInput","setQuestionList","getTriviaQuestions","a","axios","get","response","data","results","id","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1065c85.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>Trivia!!</h1>\r\n        </header>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nexport default function Question({question}) {\r\n\r\n    function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    const [answerChoices, setAnswerChoices] = useState([question.correct_answer, ...question.incorrect_answers]);\r\n    const [shuffledArray, setShuffledArray] = useState(null);\r\n    const [selectedAnswer, setSelectedAnswer] = useState('');\r\n    const [pointValue, setPointValue] = useState(null);\r\n\r\n    useEffect(() => {\r\n            shuffleAnswers();\r\n            setShuffledArray(answerChoices);\r\n        }, []\r\n    )\r\n    const shuffleAnswers = () => {\r\n        shuffleArray(answerChoices);\r\n    }\r\n\r\n    const determinePoint = e => {\r\n        setSelectedAnswer(e.target.value);\r\n        if (selectedAnswer === question.correct_answer) {\r\n            setPointValue(1);\r\n            console.log(selectedAnswer);\r\n            console.log(pointValue);\r\n        } else {\r\n            setPointValue(0);\r\n            console.log(selectedAnswer);\r\n            console.log(pointValue);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = 'card' onLoad = {shuffleAnswers}>\r\n            <h4>{question.question}</h4>\r\n            {shuffledArray && (<div>\r\n                <form>\r\n                    <label><input type = 'radio' name = 'answer' value = {shuffledArray[0]} onClick = {determinePoint}/>\r\n                        {shuffledArray[0]}</label>\r\n                    <br/>\r\n                    <label><input type = 'radio' name = 'answer' value = {shuffledArray[1]} onClick = {determinePoint}/>\r\n                        {shuffledArray[1]}</label>\r\n                    <br/>\r\n                    <label><input type = 'radio' name = 'answer' value = {shuffledArray[2]} onClick = {determinePoint}/>\r\n                        {shuffledArray[2]}</label>\r\n                    <br/>\r\n                    <label><input type = 'radio' name = 'answer' value = {shuffledArray[3]} onClick = {determinePoint}/>\r\n                        {shuffledArray[3]}</label>\r\n                    <br/>\r\n                    <br/>\r\n                </form>\r\n            </div>)}\r\n            <hr className = 'questionDivider'/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Question from './Question';\r\n\r\nexport default function TriviaSection({questionList}) {\r\n    return (\r\n        <div className = 'triviaSection'>\r\n            <h2>Answer the Following questions!</h2>\r\n            <div className = 'questionList'>\r\n                {questionList && questionList.map(question => {\r\n                    return <Question question = {question}/>;\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport Header from './components/Header';\nimport TriviaSection from './components/TriviaSection'\nimport axios from 'axios';\n\nfunction App() {\n    const [name, setName] = useState('');\n    const [nameInput, setNameInput] = useState('');\n    const [showInput, setShowInput] = useState(true);\n    const [score, setScore] = useState(0);\n    const [questionList, setQuestionList] = useState(null);\n\n    useEffect(() => {\n        getTriviaQuestions();\n    }, []);\n\n    const handleChange = e => {\n        const value = e.target.value;\n        setNameInput(value);\n    }\n\n    const updateName = () => {\n        setName(nameInput);\n        setShowInput(false);\n    }\n\n    const getTriviaQuestions = async () => {\n        const response = await axios.get(\n            'https://opentdb.com/api.php?amount=10&category=14&type=multiple'\n        );\n        setQuestionList(response.data.results);\n    }\n\n\n    return (\n        <div className = \"App\">\n            <Header/>\n            <hr/>\n            <div> {/*BEGIN NAME INPUT WELCOME PANEL*/}\n                {/*This is the welcome panel*/}\n                {/*It can be moved once I figure out how to pass data from a child to a parent*/}\n                {showInput === true &&\n                (<div id = 'getNameFromUser'>\n                    <p>What is your name? </p>\n                    <input type = 'text' value = {nameInput} onChange = {handleChange}/>\n                    <button onClick = {updateName}>Enter</button>\n\n                </div>)}\n                {showInput === false &&\n                (<div id = 'showWelcomeMessage'>\n                    <h3>Hello, {name}!</h3>\n                </div>)}\n            </div>\n            <hr/>\n            {/*END OF NAME INPUT WELCOME PANEL*/}\n            {showInput === false &&\n            (<div>\n                <TriviaSection\n                    questionList = {questionList}\n                />\n                {/*ENTER THE TRIVIA QUESTIONS HERE*/}\n            </div>)}\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}